user first register in our system, on main
stop app
user start app again, login


operations: (V: success, X: fail)
0. check current condition: main branch
1. commit init db schema  V
2. alter table: drop column, drop table Ｖ
3. commit again. Ｖ
4. on the same branch, hop to older version. V
5. try to commit again to see if system blocks the situation V
6. git log, see newest branch info 
7. hop to the newest version of main branch Ｖ
7. try the commit again on newest version V

8. checkout to a new branch branch 1 V
7. commit on the new branch V
8. checkout back to an older branch V
9. try to checkout to  a branch that does not exist V



#####################################################
to be tested:
10. merge main and branch1.
no-conflict merge
conflict merge: 
狀況一：column改名 -> 系統不會把它當作conflict, merge conflict (系統假設：原col刪掉、增加一個新的col)
狀況二：column attr改變(eg: int -> varchar) -> merge conflict
狀況三：constraint:
    - PK / FK新增 -> merge success
    - PK / FK刪除 -> merge conflict
狀況四：column增減：一樣，新增＝success, delete/update=conflict
狀況五：table增減：一樣







#####################################################
functions and file modifications
branch_tail_schema
    we need to add an empty main.sql in this folder

login
    need to store user variables

create 
    schema有更動（目前dev應該已更新過了）：user table current_version varchar(500) 必須允許空值

commit
    要把下面的if main == main註解掉

hop
    要把下面的if main == main註解掉


checkout


diff


dump
    每次衝新連線才可以更新到schema的變動，不然只能更新到column的改動
    要把下面的if main == main註解掉


remove init.py


user / create
    建構 vcdb 放在 create.py
    add dot env
    connect to remote lab computer's vcdb
    login要改吃remote conn info

GUI.py
    fix return msg: 每個功能都要有成功或失敗的return msg顯示於 tkinter之上